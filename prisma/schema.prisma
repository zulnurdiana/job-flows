
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Divisi {
  id_divisi        Int       @id @default(autoincrement()) 
  nama_divisi      String @unique
  deskripsi_divisi String?
  jabatans         Jabatan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("divisi")
}

model Jabatan {
  id_jabatan        Int       @id @default(autoincrement())
  id_divisi         Int
  nama_jabatan      String    @unique
  deskripsi_jabatan String?
  divisi            Divisi    @relation(fields: [id_divisi], references: [id_divisi], onDelete: Cascade)
  permintaans       Permintaan[] 
  pegawai           Pegawai[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jabatan")
}

model Pegawai{
  id_pegawai Int @id @default(autoincrement())
  nama_pegawai String
  email         String?
  status_pegawai String
  tanggal_gabung DateTime?
  id_jabatan Int
  jabatan Jabatan @relation(fields: [id_jabatan], references: [id_jabatan])

}


model Permintaan {
  id_permintaan      Int         @id @default(autoincrement())
  jumlah_pegawai     Int
  status_permintaan  Boolean?    @default(false)
  approved           Boolean?    @default(false)
  tanggal_permintaan DateTime    @default(now())
  id_jabatan         Int
  jabatan            Jabatan     @relation(fields: [id_jabatan], references: [id_jabatan], onDelete: Cascade)
  id_user            String
  user               User        @relation(fields: [id_user], references: [id])
  persyaratan        Persyaratan[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt


  @@map("permintaan")
}

model Job {
  id               Int        @id @default(autoincrement())
  slug             String     @unique
  title            String
  type             String
  locationType     String
  location         String?
  description      String?
  salary           Int
  companyName      String
  applicationEmail String?
  applicationUrl   String?
  companyLogoUrl   String?
  approved         Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  user             User[]

  persyaratan Persyaratan[]


  @@map("jobs")
}

model Persyaratan {
  id_persyaratan Int @id @default(autoincrement())
  pengalaman_kerja Int
  pendidikan String
  umur Int
  status_pernikahan String

  id_user String
  user    User             @relation(fields: [id_user], references: [id])

  id_permintaan Int
  permintaan Permintaan  @relation(fields: [id_permintaan], references: [id_permintaan])

  id_job Int?
  job Job? @relation(fields: [id_job],references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("persyaratan")
}

enum JenisKriteria {
  COST
  BENEFIT
}

model Kriteria {
  id_kriteria Int @id @default(autoincrement())
  deskripsi_kriteria String
  nama_kriteria String
  bobot Float @default(0.0)
  kepentingan Float?
  jenis_kriteria JenisKriteria 
  id_user String
  user User @relation(fields: [id_user],references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kriteria")

}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String? @default("pelamar")
  permintaan    Permintaan[]
  persyaratan   Persyaratan[]
  kriteria      Kriteria[]
  accounts      Account[]
  sessions      Session[]
  id_job        Int?
  job Job? @relation(fields: [id_job],references: [id])
 
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 