// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
   url      = env("DATABASE_URL")
}

model Divisi {
  id_divisi        Int       @id @default(autoincrement()) 
  nama_divisi      String @unique
  deskripsi_divisi String?
  jabatans         Jabatan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("divisi")
}

model Jabatan {
  id_jabatan        Int       @id @default(autoincrement())
  id_divisi         Int
  nama_jabatan      String    @unique
  deskripsi_jabatan String?
  divisi            Divisi    @relation(fields: [id_divisi], references: [id_divisi], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jabatan")
}

model Job {
  id Int @id @default(autoincrement())
  slug String @unique
  title String
  type String
  locationType String
  location String?
  description String?
  salary Int
  companyName String
  applicationEmail String?
  applicationUrl String?
  companyLogoUrl String?
  approved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("jobs")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String? @default("pelamar")
  accounts      Account[]
  sessions      Session[]
 
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

